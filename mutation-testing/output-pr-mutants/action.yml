name: Output Mutants

runs:
  using: "composite"

  steps:
    - name: Download artifacts
      id: download_artifacts
      uses: actions/download-artifact@v3

    - name: Append output from shards
      id: append_mutant_outcomes
      shell: bash
      run: |
        # List of all possible mutant outcomes file names and folder names collected from jobs.
        folders=("mutants-shard-big--1" "mutants-shard-big-0" "mutants-shard-big-1" "mutants-shard-big-2" "mutants-shard-big-3" "mutants-shard-big-4" "mutants-shard-big-5" "mutants-shard-big-6" "mutants-shard-big-7" "mutants-shard-small--1" "mutants-shard-small-0" "mutants-shard-small-1" "mutants-shard-small-2" "mutants-shard-small-3")
        files=("missed.txt" "caught.txt" "timeout.txt" "unviable.txt")
        mkdir -p mutants-shards

        # If the folder/file path exists, append the output to it's corresponding file name in a newly created folder that will contain all outputs combined
        for file in "${files[@]}"; do
          for folder in "${folders[@]}"; do
            if [[ -s "$folder/$file" ]]; then
              cat "$folder/$file" >> "mutants-shards/$file"
            fi
          done
        done

        # If the folder/exit_code.txt path exists, check for the exit code and retain the most relevant one to a file
        # - 4: unmutated build failed
        # - 1: incorrect command line arguments
        # - 2, 3: found timeout/missed/unviable mutants
        # - 0: everything worked fine
        # - *: unknown exit code
        for folder in "${folders[@]}"; do
          if [[ -s "$folder/exit_code.txt" ]]; then
            exit_code=$(<"${folder}/exit_code.txt")
            most_relevant_exit_code=0

            case $exit_code in
            4)
              most_relevant_exit_code=4
              ;;
            1)
              [ "$most_relevant_exit_code" -eq 0 ] && most_relevant_exit_code=1
              ;;
            2)
              [ "$most_relevant_exit_code" -eq 0 ] && most_relevant_exit_code=2
              ;;
            3)
              [ "$most_relevant_exit_code" -eq 0 ] && most_relevant_exit_code=3
              ;;
            0)
              ;;
            *)
              echo "Unknown exit code $exit_code"
              most_relevant_exit_code=$exit_code
              ;;
            esac
          fi
        done

        echo "$most_relevant_exit_code" > './mutants-shards/exit_code.txt'

    - name: Print mutants
      id: print_tested_mutants
      shell: bash
      run: |
        # Info for creating the link that paths to the specific mutation tested
        server_url="${{ github.server_url }}"
        organisation="${{ github.repository_owner }}"
        repository="${{ github.event.repository.name }}"
        commit="${{ github.sha }}"

        # Function to write to github step summary with specific info depending on the mutation category
        write_section() {
          local section_title=$1
          local file_name=$2

          if [ -s "$file_name" ]; then
            if [[ "$section_title" != "" ]]; then
              echo "## $section_title" >> "$GITHUB_STEP_SUMMARY"
            fi

            if [[ "$section_title" == "Missed:" ]]; then
              echo "<details>" >> "$GITHUB_STEP_SUMMARY"
              echo "<summary>What are missed mutants?</summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "<br>" >> "$GITHUB_STEP_SUMMARY"
              echo "No test failed with this mutation applied, which seems to indicate a gap in test coverage. Or, it may be that the mutant is undistinguishable from the correct code. You may wish to add a better test, or mark that the function should be skipped." >> "$GITHUB_STEP_SUMMARY"
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Timeout:" ]]; then
              echo "<details>" >> "$GITHUB_STEP_SUMMARY"
              echo "<summary>What are timeout mutants?</summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "<br>" >> "$GITHUB_STEP_SUMMARY"
              echo "The mutation caused the test suite to run for a long time, until it was eventually killed. You might want to investigate the cause and potentially mark the function to be skipped." >> "$GITHUB_STEP_SUMMARY"
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Unviable:" ]]; then
              echo "<details>" >> "$GITHUB_STEP_SUMMARY"
              echo "<summary>What are unviable mutants?</summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "<br>" >> "$GITHUB_STEP_SUMMARY"
              echo "The attempted mutation doesn't compile. This is inconclusive about test coverage and no action is needed, unless you wish to test the specific function, in which case you may wish to add a 'Default::default()' implementation for the specific return type." >> "$GITHUB_STEP_SUMMARY"
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
            fi

            if [[ "$section_title" != "" ]]; then
              awk -F':' '{printf "- [ ] " "[" $0 "]"; file_path=$1; line=$2; $1=""; $2=""; printf "(" "'"$server_url"'/'"$organisation"'/'"$repository"'/blob/'"$commit"'/" file_path "#L" line-1 ")\n\n"}' "$file_name" >> "$GITHUB_STEP_SUMMARY"
            else
              awk -F':' '{printf "- [x] " "[" $0 "]"; file_path=$1; line=$2; $1=""; $2=""; printf "(" "'"$server_url"'/'"$organisation"'/'"$repository"'/blob/'"$commit"'/" file_path "#L" line-1 ")\n\n"}' "$file_name" >> "$GITHUB_STEP_SUMMARY"
            fi

            if [[ "$section_title" == "Missed:" ]]; then
              echo "### To resolve this issue, consider one of the following options:" >> "$GITHUB_STEP_SUMMARY"
              echo "- Modify or add tests including this function." >> "$GITHUB_STEP_SUMMARY"
              echo "- If you are absolutely certain that this function should not undergo mutation testing, add '#[mutants::skip]' or '#[cfg_attr(test, mutants::skip)]' function header to skip it." >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Timeout:" ]]; then
              echo "### To resolve this issue, consider one of the following options:" >> "$GITHUB_STEP_SUMMARY"
              echo "- Modify the tests that include this funcion." >> "$GITHUB_STEP_SUMMARY"
              echo "- Add '#[mutants::skip]' or '#[cfg_attr(test, mutants::skip)]' function header to skip it." >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Unviable:" ]]; then
              echo "### To resolve this issue, consider one of the following options:" >> "$GITHUB_STEP_SUMMARY"
              echo "- Create 'Default::default()' implementation for the specific structure." >> "$GITHUB_STEP_SUMMARY"
              echo "- Add '#[mutants::skip]' or '#[cfg_attr(test, mutants::skip)]' function header to skip it." >> "$GITHUB_STEP_SUMMARY"
            fi

            echo >> "$GITHUB_STEP_SUMMARY"
          fi
        }

        # Print uncaught (missed/timeout/unviable) mutants to summary
        echo "# Uncaught Mutants" >> "$GITHUB_STEP_SUMMARY"
        write_section "Missed:" "./mutants-shards/missed.txt"
        write_section "Timeout:" "./mutants-shards/timeout.txt"
        write_section "Unviable:" "./mutants-shards/unviable.txt"

        # Print caught mutants to summary
        echo "# Caught Mutants" >> "$GITHUB_STEP_SUMMARY"
        write_section "" "./mutants-shards/caught.txt"

        # Get most relevant exit code from the file and match it
        exit_code=$(<"mutants-shards/exit_code.txt")

        case $exit_code in
          0)
              if [[ -f ./mutants-shards/unviable.txt ]]; then
                echo "Found unviable mutants!"
                exit 1
              fi
            echo "All new and updated functions are caught!"
            ;;
          1)
            echo "Invalid command line arguments!"
            exit 1
            ;;
          2 | 3)
            echo "Found missed/timeout/unviable mutants!"
            exit 1
            ;;
          4)
            echo "Building the packages failed without any mutations!"
            exit 1
            ;;
          *)
            echo "Unknown exit code: $exit_code"
            exit 1
          ;;
        esac
